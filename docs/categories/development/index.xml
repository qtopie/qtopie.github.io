<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on Blog | qtopierw</title>
    <link>https://qtopie.github.io/categories/development/</link>
    <description>Recent content in development on Blog | qtopierw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>qtopie.rw@gmail.com (qtopierw)</managingEditor>
    <webMaster>qtopie.rw@gmail.com (qtopierw)</webMaster>
    <copyright>Posts licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;CC BY 4.0</copyright>
    <lastBuildDate>Wed, 18 Mar 2020 22:02:05 +0800</lastBuildDate><atom:link href="https://qtopie.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go安装</title>
      <link>https://qtopie.github.io/posts/go/setup-go/</link>
      <pubDate>Wed, 18 Mar 2020 22:02:05 +0800</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/go/setup-go/</guid>
      <description>官方下载安装向导请参考这里https://golang.org/dl/
这篇文章主要分享加速访问go依赖和资源站点的问题。
环境  Ubuntu 19.10 x86_64 版本号 go1.14 linux/amd64  下载安装 Go安装文件可以访问国内站点 https://golang.google.cn/dl/
解压后，移动到/usr/local/go目录，然后在/etc/profile里加入
export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin 使用技巧 goproxy 使用goproxy加速go module下载(解决go get无法下载来自golang.org等站点的依赖包的问题）
参考https://goproxy.io/zh/, 在go 1.13+下，我们可以使用以下命令在go env设置goproxy
go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.io,direct # 设置不走 proxy 的私有仓库，多个用逗号相隔（可选） go env -w GOPRIVATE=*.corp.example.com 同样推荐使用国内站点https://goproxy.cn/
文档查看  使用go doc命令可以在终端快速查阅文档, 例如  go doc net.Listen | vim - 参考 </description>
    </item>
    
    <item>
      <title>Make Eclipse Great Again</title>
      <link>https://qtopie.github.io/posts/development/make-gradle-work-with-eclipse/</link>
      <pubDate>Sat, 28 Dec 2019 18:07:28 +0800</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/development/make-gradle-work-with-eclipse/</guid>
      <description>Eclipse &amp;amp; Gradle 还是从那句老话开始， “工欲善其事，必先利其器”。要想熟练地完成一件事，有个好的工具往往能事半功倍。
 但是很多时候，迷信教条最终会成了造轮子而造轮子的递归循环；选择合适的工具，并掌握它，解决好问题才是正确的方向。
 这里简单说说，我选择Eclispe和Gradle的原因。
  Gradle (Gradle VS Maven or Ant); 选择gradle的原因很简单，简单而清晰的语法，强大的脚本语言，快速而稳定的构建。
  Eclipse (主要对比Idea, VS Code)
 开源及活跃而广受欢迎的社区 相对于Idea来说，个人使用经验上来看，在大Project上使用（源码多，项目多）更稳定, 且有偏向支持开源社区的因素，故使用Eclipse；VS Code对于小的Project来说还好，功能比Eclipse弱，查看多个文件及源码也不是很方便，大项目会使系统卡顿，但是小项目一般可以使用gradle + vim。    开发环境 当前开发环境
 Ubuntu 19.10 x86_64 Gradle 5.6.4 Eclipse (Snap版本)  Eclipse Platform Version: 2019-03 (4.11) Build id: I20190307-0500 OS: Linux, v.5.3.0-24-generic, x86_64 / gtk 3.24.12 Java version: 1.8.0_171 Eclipse项目配置及依赖管理 我的Java项目管理方案 我不喜欢将IDE文件提交到git代码仓库，在我看来，IDE的作用就是一个文本编辑器，而且从协作角度来看，不同的开发者可能会选择不同的编辑器，所以不需要将IDE文件提交。 而Gradle脚本，不仅作为项目开发中一款重要的工具，而且包含了很多项目配置信息，因此需要提交到git仓库(有时候，如果开发人员和CI使用了统一的或兼容的gradle版本，甚至gradle wrapper都不需要提交)
 生成项目配置  默认Gradle eclipse编译输出目录为bin, 但是gradle构建输出目录为build， 因此需要改配置。</description>
    </item>
    
    <item>
      <title>Git快速手册</title>
      <link>https://qtopie.github.io/posts/development/git-quick-guide/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/development/git-quick-guide/</guid>
      <description>WIP
快速开始  设置个人信息  git config --global user.name &amp;lt;YOUR-NAME&amp;gt; git config --global user.email &amp;lt;YOUR-EMAIL&amp;gt; # 查看个人配置 git config --list  将默认主仓库设置为main BLM运动  git config --global init.defaultbranch main  初始化仓库  mkdir /path/to/your/project cd /path/to/your/project git init # initialize an empty git repo git remote add origin git@repo-url.git Create your first file and push it to the remote repo echo &amp;#34;qtopie.rw&amp;#34; &amp;gt;&amp;gt; contributors.txt git add contributors.txt git commit -m &amp;#39;Initial commit with contributors&amp;#39; git push -u origin master 总结下常用操作</description>
    </item>
    
    <item>
      <title>CSS Intro</title>
      <link>https://qtopie.github.io/posts/web/css3/</link>
      <pubDate>Sun, 27 Nov 2016 14:19:47 +0800</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/web/css3/</guid>
      <description>Brief introduction CSS (Cascading Style Sheets)
 CSS is a language that describes the style of an HTML document. CSS describes how HTML elements should be displayed.  CSS Example
body { background-color: lightblue; } h1 { color: white; text-align: center; } p { font-family: verdana; font-size: 20px; } CSS Syntax  A CSS comprises of style rules that are interpreted by the browser and then applied to the corresponding elements in your document.</description>
    </item>
    
  </channel>
</rss>
