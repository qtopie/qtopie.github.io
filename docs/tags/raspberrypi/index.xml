<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raspberrypi on Blog | qtopierw</title>
    <link>https://qtopie.github.io/tags/raspberrypi/</link>
    <description>Recent content in raspberrypi on Blog | qtopierw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>qtopie.rw@gmail.com (qtopierw)</managingEditor>
    <webMaster>qtopie.rw@gmail.com (qtopierw)</webMaster>
    <copyright>Posts licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;CC BY 4.0</copyright>
    <lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://qtopie.github.io/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树莓派和HomeAssistant</title>
      <link>https://qtopie.github.io/posts/iot/rpi/homeassistant/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/iot/rpi/homeassistant/</guid>
      <description>目标 使用开源软件和米家智能硬件，实现简单的智能家居系统
 采用米家智能硬件的原因是, 小米智能家居做的比较早（也许是起初推广的更好，刚接触智能家居的时候就用的小米）, 另外一点是小米智能硬件确实物美价廉，在国外也很受欢迎，Github上也有很多相关项目.
  
环境和设备  RaspberryPi 4 (4GB版本) Ubuntu arm64 树莓派版本  安装HomeAssistant  这里使用Ubuntu而不是Raspbian的一个原因是Ubuntu官方软件包更新更快（比如raspbian当前为3.7而hass需要3.8+版本)， 且自己笔记本一直用Ubuntu，统一发行版使用起来更加方便
 sudo pip3 install homeassistant 如果下载很慢，可以考虑使用pypi镜像源
编辑/etc/pip.conf (使用豆瓣源）
[global] index-url = https://pypi.douban.com/simple 设置开机自启动  创建systemd service unit文件  systemctl --user edit --full --force homeassistant.service 加入以下内容
[Unit] Description=Home Assistant After=network.target [Service] Type=simple ExecStart=/home/ubuntu/.local/bin/hass Restart=on-failure RestartSec=5 [Install] WantedBy=default.target  设置用户自动登录  安装raspi-config, 然后配置 1. System Options -&amp;gt; S5 Boot / Auto Login -&amp;gt; B2 Console Autologin</description>
    </item>
    
    <item>
      <title>自动控制风扇温度</title>
      <link>https://qtopie.github.io/posts/iot/rpi/fan-and-tempature/</link>
      <pubDate>Mon, 03 Aug 2020 23:33:04 +0800</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/iot/rpi/fan-and-tempature/</guid>
      <description>最近购买了一个树莓派4B 4G内存版，替换了旧的Model3 (强迫症犯了，就为了换成type c口，但因为电源适配问题还是老老实实地又买了官方电源适配器）
树莓派4B相对3B性能提高不少，但是随之功耗和发热也上去了。 于是给它整了个金属外壳
 
但是依旧烫得厉害，可能是我手动overlock了。开风扇的话，又有点吵，晚上影响睡觉。
所以又买了一些排线和一个电磁继电器来实现自动通过风扇控制CPU等芯片温度。
主要原理  获取GPU温度  vcgencmd
vcgencmd measure_temp  获取CPU温度  cpu=$(&amp;lt;/sys/class/thermal/thermal_zone0/temp) echo &amp;#34;$((cpu/1000))c&amp;#34; 代码实现 网上已经有不少python版本的实现，但作为一个go粉，当然选择用go来实现了，正好练习一下gobot包的使用
package main import ( &amp;#34;time&amp;#34; &amp;#34;gobot.io/x/gobot&amp;#34; &amp;#34;gobot.io/x/gobot/drivers/gpio&amp;#34; &amp;#34;gobot.io/x/gobot/platforms/raspi&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; ) func main() { low, high := 50, 58 r := raspi.NewAdaptor() sw := gpio.NewDirectPinDriver(r, &amp;#34;18&amp;#34;) work := func() { gobot.Every(5*time.Second, func() { t := readCpuTemp() log.Println(&amp;#34;Temp&amp;#34;, t/1000) if t &amp;lt; low*1000 { sw.</description>
    </item>
    
    <item>
      <title>树莓派4G模块</title>
      <link>https://qtopie.github.io/posts/iot/rpi/rpi-4g-lte-module/</link>
      <pubDate>Wed, 05 Dec 2018 22:36:06 +0800</pubDate>
      <author>qtopie.rw@gmail.com (qtopierw)</author>
      <guid>https://qtopie.github.io/posts/iot/rpi/rpi-4g-lte-module/</guid>
      <description>准备环境  树莓派3B 华为4G模块：HUAWEI ME909s-821 PCIE转USB开发板 5cm天线转接线，SMA公头外螺内孔 吸盘天线全向高增益天线，SMA公头外螺内孔 中国移动4G SIM卡  4G模块技术规格及文档  技术规格 连接  基于海思芯片, 同类比较 SIM7600CE (Qualcomm MDM9206)
 文档 连接  主天线M口
开始使用 Windows上使用该4G模块需要手动安装驱动，驱动连接
Ubuntu下可以使用modemmanager管理4G模块
树莓派下使用教程如下。
 查看usb设备是否被识别  lsusb # output: Bus 001 Device 004: ID 12d1:15c1 Huawei Technologies Co., Ltd. Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. SMC9514 Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.</description>
    </item>
    
  </channel>
</rss>
